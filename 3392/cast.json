[[1.017192,{"lines":{"0":[["bash-3.2$                                                                                               ",{}]],"1":[["                                                                                                        ",{}]],"2":[["                                                                                                        ",{}]],"3":[["                                                                                                        ",{}]],"4":[["                                                                                                        ",{}]],"5":[["                                                                                                        ",{}]],"6":[["                                                                                                        ",{}]],"7":[["                                                                                                        ",{}]],"8":[["                                                                                                        ",{}]],"9":[["                                                                                                        ",{}]],"10":[["                                                                                                        ",{}]],"11":[["                                                                                                        ",{}]],"12":[["                                                                                                        ",{}]],"13":[["                                                                                                        ",{}]],"14":[["                                                                                                        ",{}]],"15":[["                                                                                                        ",{}]],"16":[["                                                                                                        ",{}]],"17":[["                                                                                                        ",{}]],"18":[["                                                                                                        ",{}]],"19":[["                                                                                                        ",{}]],"20":[["                                                                                                        ",{}]],"21":[["                                                                                                        ",{}]],"22":[["                                                                                                        ",{}]],"23":[["                                                                                                        ",{}]],"24":[["                                                                                                        ",{}]],"25":[["                                                                                                        ",{}]],"26":[["                                                                                                        ",{}]],"27":[["                                                                                                        ",{}]],"28":[["                                                                                                        ",{}]],"29":[["                                                                                                        ",{}]],"30":[["                                                                                                        ",{}]],"31":[["                                                                                                        ",{}]],"32":[["                                                                                                        ",{}]],"33":[["                                                                                                        ",{}]],"34":[["                                                                                                        ",{}]],"35":[["                                                                                                        ",{}]],"36":[["                                                                                                        ",{}]],"37":[["                                                                                                        ",{}]],"38":[["                                                                                                        ",{}]],"39":[["                                                                                                        ",{}]],"40":[["                                                                                                        ",{}]],"41":[["                                                                                                        ",{}]],"42":[["                                                                                                        ",{}]],"43":[["                                                                                                        ",{}]],"44":[["                                                                                                        ",{}]],"45":[["                                                                                                        ",{}]],"46":[["                                                                                                        ",{}]],"47":[["                                                                                                        ",{}]],"48":[["                                                                                                        ",{}]],"49":[["                                                                                                        ",{}]],"50":[["                                                                                                        ",{}]],"51":[["                                                                                                        ",{}]],"52":[["                                                                                                        ",{}]],"53":[["                                                                                                        ",{}]],"54":[["                                                                                                        ",{}]]},"cursor":{"x":10,"y":0,"visible":true}}],[1.318826,{"lines":{"0":[["bash-3.2$ l                                                                                             ",{}]]},"cursor":{"x":11}}],[0.143676,{"lines":{"0":[["bash-3.2$ ll                                                                                            ",{}]]},"cursor":{"x":12}}],[0.072089,{"cursor":{"x":0,"y":1}}],[0.00717,{"lines":{"1":[["bash: ll: command not found                                                                             ",{}]],"2":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10,"y":2}}],[0.817264,{"lines":{"2":[["bash-3.2$ l                                                                                             ",{}]]},"cursor":{"x":11}}],[0.104051,{"lines":{"2":[["bash-3.2$ ls                                                                                            ",{}]]},"cursor":{"x":12}}],[0.096029,{"cursor":{"x":13}}],[0.119905,{"lines":{"2":[["bash-3.2$ ls -                                                                                          ",{}]]},"cursor":{"x":14}}],[0.12059,{"lines":{"2":[["bash-3.2$ ls -a                                                                                         ",{}]]},"cursor":{"x":15}}],[0.087856,{"lines":{"2":[["bash-3.2$ ls -al                                                                                        ",{}]]},"cursor":{"x":16}}],[0.152,{"cursor":{"x":0,"y":3}}],[0.014376,{"lines":{"3":[["total 40                                                                                                ",{}]],"4":[["drwxr-xr-x  10 philipp  staff   340  2 Jun 13:58 ",{}],[".",{"fg":6}],["                                                      ",{}]],"5":[["drwxr-xr-x  85 philipp  staff  2890 28 Mai 13:28 ",{}],["..",{"fg":6}],["                                                     ",{}]],"6":[["-rw-r--r--@  1 philipp  staff  6148  4 Jun 20:39 .DS_Store                                              ",{}]],"7":[["drwxr-xr-x  14 philipp  staff   476  4 Jun 13:16 ",{}],[".git",{"fg":6}],["                                                   ",{}]],"8":[["-rw-r--r--   1 philipp  staff    45 30 Mai 11:44 .gitignore                                             ",{}]],"9":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"10":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"11":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"12":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"13":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"14":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10,"y":14}}],[1.642072,{"lines":{"14":[["bash-3.2$ c                                                                                             ",{}]]},"cursor":{"x":11}}],[0.09633899999999999,{"lines":{"14":[["bash-3.2$ cd                                                                                            ",{}]]},"cursor":{"x":12}}],[0.112027,{"cursor":{"x":13}}],[0.713745,{"lines":{"14":[["bash-3.2$ cd ~                                                                                          ",{}]]},"cursor":{"x":14}}],[0.214887,{"cursor":{"x":0,"y":15}}],[0.000312,{"lines":{"15":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[1.496218,{"lines":{"15":[["bash-3.2$ l                                                                                             ",{}]]},"cursor":{"x":11}}],[0.16793,{"lines":{"15":[["bash-3.2$ ll                                                                                            ",{}]]},"cursor":{"x":12}}],[0.368593,{"lines":{"15":[["bash-3.2$ l                                                                                             ",{}]]},"cursor":{"x":11}}],[0.343851,{"lines":{"15":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[0.168014,{"lines":{"15":[["bash-3.2$ c                                                                                             ",{}]]},"cursor":{"x":11}}],[0.09628200000000001,{"lines":{"15":[["bash-3.2$ cd                                                                                            ",{}]]},"cursor":{"x":12}}],[0.039779,{"cursor":{"x":13}}],[0.167921,{"lines":{"15":[["bash-3.2$ cd m                                                                                          ",{}]]},"cursor":{"x":14}}],[0.160454,{"lines":{"15":[["bash-3.2$ cd mo                                                                                         ",{}]]},"cursor":{"x":15}}],[0.176128,{"lines":{"15":[["bash-3.2$ cd mon                                                                                        ",{}]]},"cursor":{"x":16}}],[0.160263,{}],[0.471838,{"lines":{"15":[["bash-3.2$ cd mong                                                                                       ",{}]]},"cursor":{"x":17}}],[0.55232,{"lines":{"15":[["bash-3.2$ cd mon                                                                                        ",{}]]},"cursor":{"x":16}}],[0.151991,{"lines":{"15":[["bash-3.2$ cd mo                                                                                         ",{}]]},"cursor":{"x":15}}],[0.175969,{"lines":{"15":[["bash-3.2$ cd m                                                                                          ",{}]]},"cursor":{"x":14}}],[0.216233,{"lines":{"15":[["bash-3.2$ cd                                                                                            ",{}]]},"cursor":{"x":13}}],[0.088245,{"lines":{"15":[["bash-3.2$ cd c                                                                                          ",{}]]},"cursor":{"x":14}}],[0.160086,{"lines":{"15":[["bash-3.2$ cd co                                                                                         ",{}]]},"cursor":{"x":15}}],[0.08810900000000001,{"lines":{"15":[["bash-3.2$ cd code/                                                                                      ",{}]]},"cursor":{"x":18}}],[0.896334,{"lines":{"15":[["bash-3.2$ cd code/m                                                                                     ",{}]]},"cursor":{"x":19}}],[0.152367,{"lines":{"15":[["bash-3.2$ cd code/mo                                                                                    ",{}]]},"cursor":{"x":20}}],[0.151704,{"lines":{"15":[["bash-3.2$ cd code/mon                                                                                   ",{}]]},"cursor":{"x":21}}],[0.07526099999999999,{"lines":{"15":[["bash-3.2$ cd code/mongraph                                                                              ",{}]]},"cursor":{"x":26}}],[0.429346,{"cursor":{"x":0,"y":16}}],[0.000139,{"lines":{"16":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[0.6156700000000001,{"lines":{"16":[["bash-3.2$ #                                                                                             ",{}]]},"cursor":{"x":11}}],[0.071883,{"cursor":{"x":12}}],[0.464474,{"lines":{"16":[["bash-3.2$ # n                                                                                           ",{}]]},"cursor":{"x":13}}],[0.200059,{"lines":{"16":[["bash-3.2$ # no                                                                                          ",{}]]},"cursor":{"x":14}}],[0.183952,{"lines":{"16":[["bash-3.2$ # now                                                                                         ",{}]]},"cursor":{"x":15}}],[0.09606099999999999,{"cursor":{"x":16}}],[0.151915,{"lines":{"16":[["bash-3.2$ # now r                                                                                       ",{}]]},"cursor":{"x":17}}],[0.81655,{"lines":{"16":[["bash-3.2$ # now ru                                                                                      ",{}]]},"cursor":{"x":18}}],[0.18423,{"lines":{"16":[["bash-3.2$ # now run                                                                                     ",{}]]},"cursor":{"x":19}}],[0.151714,{"lines":{"16":[["bash-3.2$ # now runn                                                                                    ",{}]]},"cursor":{"x":20}}],[0.152604,{"lines":{"16":[["bash-3.2$ # now runni                                                                                   ",{}]]},"cursor":{"x":21}}],[0.151898,{"lines":{"16":[["bash-3.2$ # now runnin                                                                                  ",{}]]},"cursor":{"x":22}}],[0.08795500000000001,{"lines":{"16":[["bash-3.2$ # now running                                                                                 ",{}]]},"cursor":{"x":23}}],[0.106465,{"cursor":{"x":24}}],[0.149515,{"lines":{"16":[["bash-3.2$ # now running t                                                                               ",{}]]},"cursor":{"x":25}}],[0.07229099999999999,{"lines":{"16":[["bash-3.2$ # now running te                                                                              ",{}]]},"cursor":{"x":26}}],[0.167848,{"lines":{"16":[["bash-3.2$ # now running tes                                                                             ",{}]]},"cursor":{"x":27}}],[0.08792999999999999,{"lines":{"16":[["bash-3.2$ # now running test                                                                            ",{}]]},"cursor":{"x":28}}],[0.560605,{"cursor":{"x":0,"y":17}}],[6.999999999999999e-05,{"lines":{"17":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[1.152211,{"lines":{"17":[["bash-3.2$ n                                                                                             ",{}]]},"cursor":{"x":11}}],[0.07999299999999999,{"lines":{"17":[["bash-3.2$ np                                                                                            ",{}]]},"cursor":{"x":12}}],[0.136106,{"lines":{"17":[["bash-3.2$ npm                                                                                           ",{}]]},"cursor":{"x":13}}],[0.104153,{"cursor":{"x":14}}],[0.5124610000000001,{"lines":{"17":[["bash-3.2$ npm t                                                                                         ",{}]]},"cursor":{"x":15}}],[0.064095,{"lines":{"17":[["bash-3.2$ npm te                                                                                        ",{}]]},"cursor":{"x":16}}],[0.159633,{"lines":{"17":[["bash-3.2$ npm tes                                                                                       ",{}]]},"cursor":{"x":17}}],[0.048164,{"lines":{"17":[["bash-3.2$ npm test                                                                                      ",{}]]},"cursor":{"x":18}}],[0.20812,{"cursor":{"x":0,"y":18}}],[0.309359,{"lines":{"19":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"20":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]]},"cursor":{"y":22}}],[1.649675,{"cursor":{"y":23}}],[0.003013,{"lines":{"24":[["  Mongraph                                                                                              ",{}]]},"cursor":{"y":25}}],[0.150518,{"lines":{"25":[["    processtools                                                                                        ",{}]]},"cursor":{"y":26}}],[0.000938,{"lines":{"26":[["      #getObjectIDAsString()                                                                            ",{}]],"27":[["      ",{}],["  ◦ expect to extract the id from various kind of argument types: ",{"fg":8}],["                                ",{}]]},"cursor":{"x":72,"y":27}}],[0.137784,{"lines":{"27":[["                                                                                                        ",{}]]}}],[0.00068,{"lines":{"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"28":[["      #getCollectionByCollectionName()                                                                  ",{}]],"29":[["      ",{}],["  ◦ expect to get the collection object by collection name: ",{"fg":8}],["                                      ",{}]]},"cursor":{"x":66,"y":29}}],[0.10766,{"lines":{"29":[["                                                                                                        ",{}]]}}],[0.001728,{"lines":{"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"30":[["      #getModelByCollectionName()                                                                       ",{}]],"31":[["      ",{}],["  ◦ expect to get the model object by collection name: ",{"fg":8}],["                                           ",{}]]},"cursor":{"x":61,"y":31}}],[0.08721,{"lines":{"31":[["                                                                                                        ",{}]]}}],[0.00032,{"lines":{"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"32":[["      #getModelNameByCollectionName()                                                                   ",{}]],"33":[["      ",{}],["  ◦ expect to get the model object by collection name: ",{"fg":8}],["                                           ",{}]]},"cursor":{"y":33}}],[0.082424,{"lines":{"33":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000391,{"lines":{"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"34":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"35":[["      ",{}],["  ◦ expect to sort arguments: ",{"fg":8}],["                                                                    ",{}]]},"cursor":{"x":36,"y":35}}],[0.093999,{"lines":{"35":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000441,{"lines":{"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"36":[["      #populateResultWithDocuments()                                                                    ",{}]],"37":[["      ",{}],["  ◦ expect to get an error and null with options as result if the data is not usable: ",{"fg":8}],["            ",{}]]},"cursor":{"x":92,"y":37}}],[0.085483,{"lines":{"37":[["                                                                                                        ",{}]]}}],[0.000241,{"lines":{"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"38":[["      ",{}],["  ◦ expect to get a node populated with the corresponding document: ",{"fg":8}],["                              ",{}]]},"cursor":{"x":74,"y":38}}],[0.123303,{"lines":{"38":[["                                                                                                        ",{}]]}}],[0.001419,{"lines":{"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"39":[["      ",{}],["  ◦ expect to get relationships populated with the corresponding documents: ",{"fg":8}],["                      ",{}]]},"cursor":{"x":82,"y":39}}],[0.11993,{"lines":{"39":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000426,{"lines":{"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"40":[["      ",{}],["  ◦ expect to get path populated w/ corresponding documents: ",{"fg":8}],["                                     ",{}]]},"cursor":{"x":67,"y":40}}],[0.162927,{"lines":{"40":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000453,{"lines":{"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"41":[["      ",{}],["  ◦ expect to get path populated w/ corresponding documents with query: ",{"fg":8}],["                          ",{}]]},"cursor":{"x":78,"y":41}}],[0.167338,{"lines":{"41":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000771,{"lines":{"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"42":[["      ",{}],["  ◦ expect to get path populated w/ corresponding documents with distinct collection: ",{"fg":8}],["            ",{}]]},"cursor":{"x":92,"y":42}}],[0.141038,{"lines":{"42":[["                                                                                                        ",{}]]}}],[0.001515,{"lines":{"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"43":[["    mongraph                                                                                            ",{}]],"44":[["      #init()                                                                                           ",{}]],"45":[["      ",{}],["  ◦ expect that we have the all needed records in mongodb: ",{"fg":8}],["                                       ",{}]]},"cursor":{"x":65,"y":45}}],[0.076726,{"lines":{"45":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000544,{"lines":{"45":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"46":[["    mongraphMongoosePlugin                                                                              ",{}]],"47":[["      #schema                                                                                           ",{}]],"48":[["      ",{}],["  ◦ expect to have extra attributes reserved for use with neo4j: ",{"fg":8}],["                                 ",{}]]},"cursor":{"x":71,"y":48}}],[0.135881,{"lines":{"48":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.0005070000000000001,{"lines":{"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"49":[["      ",{}],["  ◦ expect that schema extensions and hooks can be optional: ",{"fg":8}],["                                     ",{}]]},"cursor":{"x":67,"y":49}}],[0.168878,{"lines":{"49":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.002902,{"lines":{"49":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"50":[["    mongoose::Document                                                                                  ",{}]],"51":[["      #getNode()                                                                                        ",{}]],"52":[["      ",{}],["  ◦ expect not to get a corresponding node for an unstored document in graphdb: ",{"fg":8}],["                  ",{}]]},"cursor":{"x":86,"y":52}}],[0.08484700000000001,{"lines":{"52":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000163,{"lines":{"52":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"53":[["      ",{}],["  ◦ expect to find always the same corresponding node to a stored document: ",{"fg":8}],["                      ",{}]]},"cursor":{"x":82,"y":53}}],[0.09621200000000001,{"lines":{"53":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.001027,{"lines":{"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"54":[["      ",{}],["  ◦ expect to find a node by collection and _id through index on neo4j: ",{"fg":8}],["                          ",{}]]},"cursor":{"x":78,"y":54}}],[0.11347,{"lines":{"54":[["                                                                                                        ",{}]]}}],[0.000624,{"lines":{"0":[["bash-3.2$ ls -al                                                                                        ",{}]],"1":[["total 40                                                                                                ",{}]],"2":[["drwxr-xr-x  10 philipp  staff   340  2 Jun 13:58 ",{}],[".",{"fg":6}],["                                                      ",{}]],"3":[["drwxr-xr-x  85 philipp  staff  2890 28 Mai 13:28 ",{}],["..",{"fg":6}],["                                                     ",{}]],"4":[["-rw-r--r--@  1 philipp  staff  6148  4 Jun 20:39 .DS_Store                                              ",{}]],"5":[["drwxr-xr-x  14 philipp  staff   476  4 Jun 13:16 ",{}],[".git",{"fg":6}],["                                                   ",{}]],"6":[["-rw-r--r--   1 philipp  staff    45 30 Mai 11:44 .gitignore                                             ",{}]],"7":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"8":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"9":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"10":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"11":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"12":[["bash-3.2$ cd ~                                                                                          ",{}]],"13":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"14":[["bash-3.2$ # now running test                                                                            ",{}]],"15":[["bash-3.2$ npm test                                                                                      ",{}]],"16":[["                                                                                                        ",{}]],"17":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"18":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"19":[["                                                                                                        ",{}]],"20":[["                                                                                                        ",{}]],"22":[["  Mongraph                                                                                              ",{}]],"23":[["    processtools                                                                                        ",{}]],"24":[["      #getObjectIDAsString()                                                                            ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"26":[["      #getCollectionByCollectionName()                                                                  ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"28":[["      #getModelByCollectionName()                                                                       ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"30":[["      #getModelNameByCollectionName()                                                                   ",{}]],"32":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"34":[["      #populateResultWithDocuments()                                                                    ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"41":[["    mongraph                                                                                            ",{}]],"42":[["      #init()                                                                                           ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"44":[["    mongraphMongoosePlugin                                                                              ",{}]],"45":[["      #schema                                                                                           ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"48":[["    mongoose::Document                                                                                  ",{}]],"49":[["      #getNode()                                                                                        ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"53":[["      #createRelationshipTo()                                                                           ",{}]],"54":[["      ",{}],["  ◦ expect to create an outgoing relationship from this document to another document: ",{"fg":8}],["            ",{}]]},"cursor":{"x":92}}],[0.115817,{"lines":{"54":[["                                                                                                        ",{}]]}}],[0.000421,{"lines":{"0":[["drwxr-xr-x  10 philipp  staff   340  2 Jun 13:58 ",{}],[".",{"fg":6}],["                                                      ",{}]],"1":[["drwxr-xr-x  85 philipp  staff  2890 28 Mai 13:28 ",{}],["..",{"fg":6}],["                                                     ",{}]],"2":[["-rw-r--r--@  1 philipp  staff  6148  4 Jun 20:39 .DS_Store                                              ",{}]],"3":[["drwxr-xr-x  14 philipp  staff   476  4 Jun 13:16 ",{}],[".git",{"fg":6}],["                                                   ",{}]],"4":[["-rw-r--r--   1 philipp  staff    45 30 Mai 11:44 .gitignore                                             ",{}]],"5":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"6":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"7":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"8":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"9":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"10":[["bash-3.2$ cd ~                                                                                          ",{}]],"11":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"12":[["bash-3.2$ # now running test                                                                            ",{}]],"13":[["bash-3.2$ npm test                                                                                      ",{}]],"14":[["                                                                                                        ",{}]],"15":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"16":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"17":[["                                                                                                        ",{}]],"18":[["                                                                                                        ",{}]],"20":[["  Mongraph                                                                                              ",{}]],"21":[["    processtools                                                                                        ",{}]],"22":[["      #getObjectIDAsString()                                                                            ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"24":[["      #getCollectionByCollectionName()                                                                  ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"26":[["      #getModelByCollectionName()                                                                       ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"28":[["      #getModelNameByCollectionName()                                                                   ",{}]],"30":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"32":[["      #populateResultWithDocuments()                                                                    ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"39":[["    mongraph                                                                                            ",{}]],"40":[["      #init()                                                                                           ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"42":[["    mongraphMongoosePlugin                                                                              ",{}]],"43":[["      #schema                                                                                           ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"46":[["    mongoose::Document                                                                                  ",{}]],"47":[["      #getNode()                                                                                        ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"51":[["      #createRelationshipTo()                                                                           ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"53":[["      #createRelationshipFrom()                                                                         ",{}]],"54":[["      ",{}],["  ◦ expect to create an incoming relationship from another document to this document: ",{"fg":8}],["            ",{}]]}}],[0.088232,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000195,{"lines":{"0":[["-rw-r--r--@  1 philipp  staff  6148  4 Jun 20:39 .DS_Store                                              ",{}]],"1":[["drwxr-xr-x  14 philipp  staff   476  4 Jun 13:16 ",{}],[".git",{"fg":6}],["                                                   ",{}]],"2":[["-rw-r--r--   1 philipp  staff    45 30 Mai 11:44 .gitignore                                             ",{}]],"3":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"4":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"5":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"6":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"7":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"8":[["bash-3.2$ cd ~                                                                                          ",{}]],"9":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"10":[["bash-3.2$ # now running test                                                                            ",{}]],"11":[["bash-3.2$ npm test                                                                                      ",{}]],"12":[["                                                                                                        ",{}]],"13":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"14":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"15":[["                                                                                                        ",{}]],"16":[["                                                                                                        ",{}]],"18":[["  Mongraph                                                                                              ",{}]],"19":[["    processtools                                                                                        ",{}]],"20":[["      #getObjectIDAsString()                                                                            ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"22":[["      #getCollectionByCollectionName()                                                                  ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"24":[["      #getModelByCollectionName()                                                                       ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"26":[["      #getModelNameByCollectionName()                                                                   ",{}]],"28":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"30":[["      #populateResultWithDocuments()                                                                    ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"37":[["    mongraph                                                                                            ",{}]],"38":[["      #init()                                                                                           ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"40":[["    mongraphMongoosePlugin                                                                              ",{}]],"41":[["      #schema                                                                                           ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"44":[["    mongoose::Document                                                                                  ",{}]],"45":[["      #getNode()                                                                                        ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"49":[["      #createRelationshipTo()                                                                           ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"51":[["      #createRelationshipFrom()                                                                         ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"53":[["      #createRelationshipBetween()                                                                      ",{}]],"54":[["      ",{}],["  ◦ expect to create a relationship between two documents (bidirectional): ",{"fg":8}],["                       ",{}]]},"cursor":{"x":81}}],[0.106289,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.00024,{"lines":{"0":[["-rw-r--r--   1 philipp  staff    45 30 Mai 11:44 .gitignore                                             ",{}]],"1":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"2":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"3":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"4":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"5":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"6":[["bash-3.2$ cd ~                                                                                          ",{}]],"7":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"8":[["bash-3.2$ # now running test                                                                            ",{}]],"9":[["bash-3.2$ npm test                                                                                      ",{}]],"10":[["                                                                                                        ",{}]],"11":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"12":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"13":[["                                                                                                        ",{}]],"14":[["                                                                                                        ",{}]],"16":[["  Mongraph                                                                                              ",{}]],"17":[["    processtools                                                                                        ",{}]],"18":[["      #getObjectIDAsString()                                                                            ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"20":[["      #getCollectionByCollectionName()                                                                  ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"22":[["      #getModelByCollectionName()                                                                       ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"24":[["      #getModelNameByCollectionName()                                                                   ",{}]],"26":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"28":[["      #populateResultWithDocuments()                                                                    ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"35":[["    mongraph                                                                                            ",{}]],"36":[["      #init()                                                                                           ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"38":[["    mongraphMongoosePlugin                                                                              ",{}]],"39":[["      #schema                                                                                           ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"42":[["    mongoose::Document                                                                                  ",{}]],"43":[["      #getNode()                                                                                        ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"47":[["      #createRelationshipTo()                                                                           ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"49":[["      #createRelationshipFrom()                                                                         ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"51":[["      #createRelationshipBetween()                                                                      ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"53":[["      #removeRelationshipsTo                                                                            ",{}]],"54":[["      ",{}],["  ◦ expect to remove outgoing relationships to a document: ",{"fg":8}],["                                       ",{}]]},"cursor":{"x":65}}],[0.127786,{"lines":{"0":[["-rw-r--r--@  1 philipp  staff  3554  2 Jun 02:18 README.md                                              ",{}]],"1":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"2":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"3":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"4":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"5":[["bash-3.2$ cd ~                                                                                          ",{}]],"6":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"7":[["bash-3.2$ # now running test                                                                            ",{}]],"8":[["bash-3.2$ npm test                                                                                      ",{}]],"9":[["                                                                                                        ",{}]],"10":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"11":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"12":[["                                                                                                        ",{}]],"15":[["  Mongraph                                                                                              ",{}]],"16":[["    processtools                                                                                        ",{}]],"17":[["      #getObjectIDAsString()                                                                            ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"19":[["      #getCollectionByCollectionName()                                                                  ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"21":[["      #getModelByCollectionName()                                                                       ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"23":[["      #getModelNameByCollectionName()                                                                   ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"25":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"27":[["      #populateResultWithDocuments()                                                                    ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"34":[["    mongraph                                                                                            ",{}]],"35":[["      #init()                                                                                           ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"37":[["    mongraphMongoosePlugin                                                                              ",{}]],"38":[["      #schema                                                                                           ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"41":[["    mongoose::Document                                                                                  ",{}]],"42":[["      #getNode()                                                                                        ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"46":[["      #createRelationshipTo()                                                                           ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"48":[["      #createRelationshipFrom()                                                                         ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"50":[["      #createRelationshipBetween()                                                                      ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"52":[["      #removeRelationshipsTo                                                                            ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000481,{"lines":{"0":[["drwxr-xr-x  13 philipp  staff   442  4 Jun 12:04 ",{}],["node_modules",{"fg":6}],["                                           ",{}]],"1":[["-rw-r--r--   1 philipp  staff   884 30 Mai 10:37 package.json                                           ",{}]],"2":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"3":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"4":[["bash-3.2$ cd ~                                                                                          ",{}]],"5":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"6":[["bash-3.2$ # now running test                                                                            ",{}]],"7":[["bash-3.2$ npm test                                                                                      ",{}]],"8":[["                                                                                                        ",{}]],"9":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"10":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"11":[["                                                                                                        ",{}]],"14":[["  Mongraph                                                                                              ",{}]],"15":[["    processtools                                                                                        ",{}]],"16":[["      #getObjectIDAsString()                                                                            ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"18":[["      #getCollectionByCollectionName()                                                                  ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"20":[["      #getModelByCollectionName()                                                                       ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"22":[["      #getModelNameByCollectionName()                                                                   ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"24":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"26":[["      #populateResultWithDocuments()                                                                    ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"33":[["    mongraph                                                                                            ",{}]],"34":[["      #init()                                                                                           ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"36":[["    mongraphMongoosePlugin                                                                              ",{}]],"37":[["      #schema                                                                                           ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"40":[["    mongoose::Document                                                                                  ",{}]],"41":[["      #getNode()                                                                                        ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"45":[["      #createRelationshipTo()                                                                           ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"47":[["      #createRelationshipFrom()                                                                         ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"49":[["      #createRelationshipBetween()                                                                      ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"51":[["      #removeRelationshipsTo                                                                            ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"53":[["      #removeRelationshipsFrom                                                                          ",{}]],"54":[["      ",{}],["  ◦ expects to remove incoming relationships from a document: ",{"fg":8}],["                                    ",{}]]},"cursor":{"x":68}}],[0.127571,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.00048,{"lines":{"0":[["drwxr-xr-x   9 philipp  staff   306  4 Jun 11:05 ",{}],["src",{"fg":6}],["                                                    ",{}]],"1":[["drwxr-xr-x   5 philipp  staff   170  4 Jun 17:27 ",{}],["test",{"fg":6}],["                                                   ",{}]],"2":[["bash-3.2$ cd ~                                                                                          ",{}]],"3":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"4":[["bash-3.2$ # now running test                                                                            ",{}]],"5":[["bash-3.2$ npm test                                                                                      ",{}]],"6":[["                                                                                                        ",{}]],"7":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"8":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"9":[["                                                                                                        ",{}]],"10":[["                                                                                                        ",{}]],"12":[["  Mongraph                                                                                              ",{}]],"13":[["    processtools                                                                                        ",{}]],"14":[["      #getObjectIDAsString()                                                                            ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"16":[["      #getCollectionByCollectionName()                                                                  ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"18":[["      #getModelByCollectionName()                                                                       ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"20":[["      #getModelNameByCollectionName()                                                                   ",{}]],"22":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"24":[["      #populateResultWithDocuments()                                                                    ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"31":[["    mongraph                                                                                            ",{}]],"32":[["      #init()                                                                                           ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"34":[["    mongraphMongoosePlugin                                                                              ",{}]],"35":[["      #schema                                                                                           ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"38":[["    mongoose::Document                                                                                  ",{}]],"39":[["      #getNode()                                                                                        ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"43":[["      #createRelationshipTo()                                                                           ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"45":[["      #createRelationshipFrom()                                                                         ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"47":[["      #createRelationshipBetween()                                                                      ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"49":[["      #removeRelationshipsTo                                                                            ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"51":[["      #removeRelationshipsFrom                                                                          ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"53":[["      #removeRelationshipsBetween                                                                       ",{}]],"54":[["      ",{}],["  ◦ expects to remove incoming and outgoing relationships between two documents: ",{"fg":8}],["                 ",{}]]},"cursor":{"x":87}}],[0.164465,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.001723,{"lines":{"0":[["bash-3.2$ cd ~                                                                                          ",{}]],"1":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"2":[["bash-3.2$ # now running test                                                                            ",{}]],"3":[["bash-3.2$ npm test                                                                                      ",{}]],"4":[["                                                                                                        ",{}]],"5":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"6":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"7":[["                                                                                                        ",{}]],"8":[["                                                                                                        ",{}]],"10":[["  Mongraph                                                                                              ",{}]],"11":[["    processtools                                                                                        ",{}]],"12":[["      #getObjectIDAsString()                                                                            ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"14":[["      #getCollectionByCollectionName()                                                                  ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"16":[["      #getModelByCollectionName()                                                                       ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"18":[["      #getModelNameByCollectionName()                                                                   ",{}]],"20":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"22":[["      #populateResultWithDocuments()                                                                    ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"29":[["    mongraph                                                                                            ",{}]],"30":[["      #init()                                                                                           ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"32":[["    mongraphMongoosePlugin                                                                              ",{}]],"33":[["      #schema                                                                                           ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"36":[["    mongoose::Document                                                                                  ",{}]],"37":[["      #getNode()                                                                                        ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"41":[["      #createRelationshipTo()                                                                           ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"43":[["      #createRelationshipFrom()                                                                         ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"45":[["      #createRelationshipBetween()                                                                      ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"47":[["      #removeRelationshipsTo                                                                            ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"49":[["      #removeRelationshipsFrom                                                                          ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"51":[["      #removeRelationshipsBetween                                                                       ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"53":[["      #removeRelationships                                                                              ",{}]],"54":[["      ",{}],["  ◦ expects to remove all incoming and outgoing relationships: ",{"fg":8}],["                                   ",{}]]},"cursor":{"x":69}}],[0.118302,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000413,{"lines":{"0":[["bash-3.2$ cd code/mongraph                                                                              ",{}]],"1":[["bash-3.2$ # now running test                                                                            ",{}]],"2":[["bash-3.2$ npm test                                                                                      ",{}]],"3":[["                                                                                                        ",{}]],"4":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"5":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"6":[["                                                                                                        ",{}]],"9":[["  Mongraph                                                                                              ",{}]],"10":[["    processtools                                                                                        ",{}]],"11":[["      #getObjectIDAsString()                                                                            ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"13":[["      #getCollectionByCollectionName()                                                                  ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"15":[["      #getModelByCollectionName()                                                                       ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"17":[["      #getModelNameByCollectionName()                                                                   ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"19":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"21":[["      #populateResultWithDocuments()                                                                    ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"28":[["    mongraph                                                                                            ",{}]],"29":[["      #init()                                                                                           ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"31":[["    mongraphMongoosePlugin                                                                              ",{}]],"32":[["      #schema                                                                                           ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"35":[["    mongoose::Document                                                                                  ",{}]],"36":[["      #getNode()                                                                                        ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"40":[["      #createRelationshipTo()                                                                           ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"42":[["      #createRelationshipFrom()                                                                         ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"44":[["      #createRelationshipBetween()                                                                      ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"46":[["      #removeRelationshipsTo                                                                            ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"48":[["      #removeRelationshipsFrom                                                                          ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"50":[["      #removeRelationshipsBetween                                                                       ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"52":[["      #removeRelationships                                                                              ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"54":[["      ",{}],["  ◦ expect to remove all relationship of a specific type: ",{"fg":8}],["                                        ",{}]]},"cursor":{"x":64}}],[0.097889,{"lines":{"54":[["                                                                                                        ",{}]]}}],[0.000495,{"lines":{"0":[["bash-3.2$ npm test                                                                                      ",{}]],"1":[["                                                                                                        ",{}]],"2":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"3":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"4":[["                                                                                                        ",{}]],"5":[["                                                                                                        ",{}]],"7":[["  Mongraph                                                                                              ",{}]],"8":[["    processtools                                                                                        ",{}]],"9":[["      #getObjectIDAsString()                                                                            ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"11":[["      #getCollectionByCollectionName()                                                                  ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"13":[["      #getModelByCollectionName()                                                                       ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"15":[["      #getModelNameByCollectionName()                                                                   ",{}]],"17":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"19":[["      #populateResultWithDocuments()                                                                    ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"26":[["    mongraph                                                                                            ",{}]],"27":[["      #init()                                                                                           ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"29":[["    mongraphMongoosePlugin                                                                              ",{}]],"30":[["      #schema                                                                                           ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"33":[["    mongoose::Document                                                                                  ",{}]],"34":[["      #getNode()                                                                                        ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"38":[["      #createRelationshipTo()                                                                           ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"40":[["      #createRelationshipFrom()                                                                         ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"42":[["      #createRelationshipBetween()                                                                      ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"44":[["      #removeRelationshipsTo                                                                            ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"46":[["      #removeRelationshipsFrom                                                                          ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"48":[["      #removeRelationshipsBetween                                                                       ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"50":[["      #removeRelationships                                                                              ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"53":[["      #allRelationships()                                                                               ",{}]],"54":[["      ",{}],["  ◦ expect to get incoming and outgoing relationships as relationship object: ",{"fg":8}],["                    ",{}]]},"cursor":{"x":84}}],[0.097652,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000166,{"lines":{"0":[["                                                                                                        ",{}]],"1":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"2":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"3":[["                                                                                                        ",{}]],"6":[["  Mongraph                                                                                              ",{}]],"7":[["    processtools                                                                                        ",{}]],"8":[["      #getObjectIDAsString()                                                                            ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"10":[["      #getCollectionByCollectionName()                                                                  ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"12":[["      #getModelByCollectionName()                                                                       ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"14":[["      #getModelNameByCollectionName()                                                                   ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"16":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"18":[["      #populateResultWithDocuments()                                                                    ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"25":[["    mongraph                                                                                            ",{}]],"26":[["      #init()                                                                                           ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"28":[["    mongraphMongoosePlugin                                                                              ",{}]],"29":[["      #schema                                                                                           ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"32":[["    mongoose::Document                                                                                  ",{}]],"33":[["      #getNode()                                                                                        ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"37":[["      #createRelationshipTo()                                                                           ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"39":[["      #createRelationshipFrom()                                                                         ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"41":[["      #createRelationshipBetween()                                                                      ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"43":[["      #removeRelationshipsTo                                                                            ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"45":[["      #removeRelationshipsFrom                                                                          ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"47":[["      #removeRelationshipsBetween                                                                       ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"49":[["      #removeRelationships                                                                              ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"52":[["      #allRelationships()                                                                               ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"54":[["      ",{}],["  ◦ expect to get all related documents attached to relationships: ",{"fg":8}],["                               ",{}]]},"cursor":{"x":73}}],[0.08402999999999999,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000246,{"lines":{"0":[["> mongraph@0.1.16 test /Users/philipp/code/mongraph                                                     ",{}]],"1":[["> coffee --map -cb test src && mocha; npm run clean                                                     ",{}]],"2":[["                                                                                                        ",{}]],"5":[["  Mongraph                                                                                              ",{}]],"6":[["    processtools                                                                                        ",{}]],"7":[["      #getObjectIDAsString()                                                                            ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"9":[["      #getCollectionByCollectionName()                                                                  ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"11":[["      #getModelByCollectionName()                                                                       ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"13":[["      #getModelNameByCollectionName()                                                                   ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"15":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"17":[["      #populateResultWithDocuments()                                                                    ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"24":[["    mongraph                                                                                            ",{}]],"25":[["      #init()                                                                                           ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"27":[["    mongraphMongoosePlugin                                                                              ",{}]],"28":[["      #schema                                                                                           ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"31":[["    mongoose::Document                                                                                  ",{}]],"32":[["      #getNode()                                                                                        ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"36":[["      #createRelationshipTo()                                                                           ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"38":[["      #createRelationshipFrom()                                                                         ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"40":[["      #createRelationshipBetween()                                                                      ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"42":[["      #removeRelationshipsTo                                                                            ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"44":[["      #removeRelationshipsFrom                                                                          ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"46":[["      #removeRelationshipsBetween                                                                       ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"48":[["      #removeRelationships                                                                              ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"51":[["      #allRelationships()                                                                               ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"54":[["      ",{}],["  ◦ expect to count all matched relationships, nodes or both: ",{"fg":8}],["                                    ",{}]]},"cursor":{"x":68}}],[0.169042,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.001596,{"lines":{"0":[["                                                                                                        ",{}]],"1":[["                                                                                                        ",{}]],"3":[["  Mongraph                                                                                              ",{}]],"4":[["    processtools                                                                                        ",{}]],"5":[["      #getObjectIDAsString()                                                                            ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"7":[["      #getCollectionByCollectionName()                                                                  ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"9":[["      #getModelByCollectionName()                                                                       ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"11":[["      #getModelNameByCollectionName()                                                                   ",{}]],"13":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"15":[["      #populateResultWithDocuments()                                                                    ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"22":[["    mongraph                                                                                            ",{}]],"23":[["      #init()                                                                                           ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"25":[["    mongraphMongoosePlugin                                                                              ",{}]],"26":[["      #schema                                                                                           ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"29":[["    mongoose::Document                                                                                  ",{}]],"30":[["      #getNode()                                                                                        ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"34":[["      #createRelationshipTo()                                                                           ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"36":[["      #createRelationshipFrom()                                                                         ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"38":[["      #createRelationshipBetween()                                                                      ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"40":[["      #removeRelationshipsTo                                                                            ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"42":[["      #removeRelationshipsFrom                                                                          ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"44":[["      #removeRelationshipsBetween                                                                       ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"46":[["      #removeRelationships                                                                              ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"49":[["      #allRelationships()                                                                               ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"53":[["      #allRelationshipsBetween()                                                                        ",{}]],"54":[["      ",{}],["  ◦ expect to get all relationships between two documents: ",{"fg":8}],["                                       ",{}]]},"cursor":{"x":65}}],[0.101494,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000187,{"lines":{"2":[["  Mongraph                                                                                              ",{}]],"3":[["    processtools                                                                                        ",{}]],"4":[["      #getObjectIDAsString()                                                                            ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"6":[["      #getCollectionByCollectionName()                                                                  ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"8":[["      #getModelByCollectionName()                                                                       ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"10":[["      #getModelNameByCollectionName()                                                                   ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"12":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"14":[["      #populateResultWithDocuments()                                                                    ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"21":[["    mongraph                                                                                            ",{}]],"22":[["      #init()                                                                                           ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"24":[["    mongraphMongoosePlugin                                                                              ",{}]],"25":[["      #schema                                                                                           ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"28":[["    mongoose::Document                                                                                  ",{}]],"29":[["      #getNode()                                                                                        ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"33":[["      #createRelationshipTo()                                                                           ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"35":[["      #createRelationshipFrom()                                                                         ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"37":[["      #createRelationshipBetween()                                                                      ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"39":[["      #removeRelationshipsTo                                                                            ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"41":[["      #removeRelationshipsFrom                                                                          ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"43":[["      #removeRelationshipsBetween                                                                       ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"45":[["      #removeRelationships                                                                              ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"48":[["      #allRelationships()                                                                               ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"52":[["      #allRelationshipsBetween()                                                                        ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"54":[["      ",{}],["  ◦ expect to get outgoing relationships between two documents: ",{"fg":8}],["                                  ",{}]]},"cursor":{"x":70}}],[0.141311,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000177,{"lines":{"1":[["  Mongraph                                                                                              ",{}]],"2":[["    processtools                                                                                        ",{}]],"3":[["      #getObjectIDAsString()                                                                            ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"5":[["      #getCollectionByCollectionName()                                                                  ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"7":[["      #getModelByCollectionName()                                                                       ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"9":[["      #getModelNameByCollectionName()                                                                   ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"11":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"13":[["      #populateResultWithDocuments()                                                                    ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"20":[["    mongraph                                                                                            ",{}]],"21":[["      #init()                                                                                           ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"23":[["    mongraphMongoosePlugin                                                                              ",{}]],"24":[["      #schema                                                                                           ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"27":[["    mongoose::Document                                                                                  ",{}]],"28":[["      #getNode()                                                                                        ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"32":[["      #createRelationshipTo()                                                                           ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"34":[["      #createRelationshipFrom()                                                                         ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"36":[["      #createRelationshipBetween()                                                                      ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"38":[["      #removeRelationshipsTo                                                                            ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"40":[["      #removeRelationshipsFrom                                                                          ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"42":[["      #removeRelationshipsBetween                                                                       ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"44":[["      #removeRelationships                                                                              ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"47":[["      #allRelationships()                                                                               ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"51":[["      #allRelationshipsBetween()                                                                        ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"54":[["      ",{}],["  ◦ expect to get incoming relationships between two documents: ",{"fg":8}],["                                  ",{}]]},"cursor":{"x":70}}],[0.139415,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000219,{"lines":{"0":[["    processtools                                                                                        ",{}]],"1":[["      #getObjectIDAsString()                                                                            ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"3":[["      #getCollectionByCollectionName()                                                                  ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"5":[["      #getModelByCollectionName()                                                                       ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"7":[["      #getModelNameByCollectionName()                                                                   ",{}]],"9":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"11":[["      #populateResultWithDocuments()                                                                    ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"18":[["    mongraph                                                                                            ",{}]],"19":[["      #init()                                                                                           ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"21":[["    mongraphMongoosePlugin                                                                              ",{}]],"22":[["      #schema                                                                                           ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"25":[["    mongoose::Document                                                                                  ",{}]],"26":[["      #getNode()                                                                                        ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"30":[["      #createRelationshipTo()                                                                           ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"32":[["      #createRelationshipFrom()                                                                         ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"34":[["      #createRelationshipBetween()                                                                      ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"36":[["      #removeRelationshipsTo                                                                            ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"38":[["      #removeRelationshipsFrom                                                                          ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"40":[["      #removeRelationshipsBetween                                                                       ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"42":[["      #removeRelationships                                                                              ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"45":[["      #allRelationships()                                                                               ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"49":[["      #allRelationshipsBetween()                                                                        ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"53":[["      #outgoingRelationships()                                                                          ",{}]],"54":[["      ",{}],["  ◦ expect to get outgoing relationships+documents from a specific collection: ",{"fg":8}],["                   ",{}]]},"cursor":{"x":85}}],[0.098894,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000331,{"lines":{"0":[["      #getObjectIDAsString()                                                                            ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"2":[["      #getCollectionByCollectionName()                                                                  ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"4":[["      #getModelByCollectionName()                                                                       ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"6":[["      #getModelNameByCollectionName()                                                                   ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"8":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"10":[["      #populateResultWithDocuments()                                                                    ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"17":[["    mongraph                                                                                            ",{}]],"18":[["      #init()                                                                                           ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"20":[["    mongraphMongoosePlugin                                                                              ",{}]],"21":[["      #schema                                                                                           ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"24":[["    mongoose::Document                                                                                  ",{}]],"25":[["      #getNode()                                                                                        ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"29":[["      #createRelationshipTo()                                                                           ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"31":[["      #createRelationshipFrom()                                                                         ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"33":[["      #createRelationshipBetween()                                                                      ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"35":[["      #removeRelationshipsTo                                                                            ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"37":[["      #removeRelationshipsFrom                                                                          ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"39":[["      #removeRelationshipsBetween                                                                       ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"41":[["      #removeRelationships                                                                              ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"44":[["      #allRelationships()                                                                               ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"48":[["      #allRelationshipsBetween()                                                                        ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"52":[["      #outgoingRelationships()                                                                          ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"54":[["      ",{}],["  ◦ expect to get incoming relationships+documents with a condition: ",{"fg":8}],["                             ",{}]]},"cursor":{"x":75}}],[0.105728,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000284,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to extract the id from various kind of argument types ",{"fg":8}],["                                 ",{}]],"1":[["      #getCollectionByCollectionName()                                                                  ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"3":[["      #getModelByCollectionName()                                                                       ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"5":[["      #getModelNameByCollectionName()                                                                   ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"7":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"9":[["      #populateResultWithDocuments()                                                                    ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"16":[["    mongraph                                                                                            ",{}]],"17":[["      #init()                                                                                           ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"19":[["    mongraphMongoosePlugin                                                                              ",{}]],"20":[["      #schema                                                                                           ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"23":[["    mongoose::Document                                                                                  ",{}]],"24":[["      #getNode()                                                                                        ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"28":[["      #createRelationshipTo()                                                                           ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"30":[["      #createRelationshipFrom()                                                                         ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"32":[["      #createRelationshipBetween()                                                                      ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"34":[["      #removeRelationshipsTo                                                                            ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"36":[["      #removeRelationshipsFrom                                                                          ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"38":[["      #removeRelationshipsBetween                                                                       ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"40":[["      #removeRelationships                                                                              ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"43":[["      #allRelationships()                                                                               ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"47":[["      #allRelationshipsBetween()                                                                        ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"51":[["      #outgoingRelationships()                                                                          ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"54":[["      ",{}],["  ◦ expect to get only outgoing relationships: ",{"fg":8}],["                                                   ",{}]]},"cursor":{"x":53}}],[0.102757,{"lines":{"54":[["                                                                                                        ",{}]]}}],[0.00043,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection object by collection name ",{"fg":8}],["                                       ",{}]],"1":[["      #getModelByCollectionName()                                                                       ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"3":[["      #getModelNameByCollectionName()                                                                   ",{}]],"5":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"7":[["      #populateResultWithDocuments()                                                                    ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"14":[["    mongraph                                                                                            ",{}]],"15":[["      #init()                                                                                           ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"17":[["    mongraphMongoosePlugin                                                                              ",{}]],"18":[["      #schema                                                                                           ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"21":[["    mongoose::Document                                                                                  ",{}]],"22":[["      #getNode()                                                                                        ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"26":[["      #createRelationshipTo()                                                                           ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"28":[["      #createRelationshipFrom()                                                                         ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"30":[["      #createRelationshipBetween()                                                                      ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"32":[["      #removeRelationshipsTo                                                                            ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"34":[["      #removeRelationshipsFrom                                                                          ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"36":[["      #removeRelationshipsBetween                                                                       ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"38":[["      #removeRelationships                                                                              ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"41":[["      #allRelationships()                                                                               ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"45":[["      #allRelationshipsBetween()                                                                        ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"49":[["      #outgoingRelationships()                                                                          ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"53":[["      #incomingRelationships()                                                                          ",{}]],"54":[["      ",{}],["  ◦ expect to get only incoming relationships: ",{"fg":8}],["                                                   ",{}]]}}],[0.089266,{"lines":{"54":[["                                                                                                        ",{}]]}}],[0.000347,{"lines":{"0":[["      #getModelByCollectionName()                                                                       ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"2":[["      #getModelNameByCollectionName()                                                                   ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the model object by collection name ",{"fg":8}],["                                            ",{}]],"4":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"6":[["      #populateResultWithDocuments()                                                                    ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"13":[["    mongraph                                                                                            ",{}]],"14":[["      #init()                                                                                           ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"16":[["    mongraphMongoosePlugin                                                                              ",{}]],"17":[["      #schema                                                                                           ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"20":[["    mongoose::Document                                                                                  ",{}]],"21":[["      #getNode()                                                                                        ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"25":[["      #createRelationshipTo()                                                                           ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"27":[["      #createRelationshipFrom()                                                                         ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"29":[["      #createRelationshipBetween()                                                                      ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"31":[["      #removeRelationshipsTo                                                                            ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"33":[["      #removeRelationshipsFrom                                                                          ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"35":[["      #removeRelationshipsBetween                                                                       ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"37":[["      #removeRelationships                                                                              ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"40":[["      #allRelationships()                                                                               ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"44":[["      #allRelationshipsBetween()                                                                        ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"48":[["      #outgoingRelationships()                                                                          ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"52":[["      #incomingRelationships()                                                                          ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"54":[["      ",{}],["  ◦ expect to get incoming relationships+documents from a specific collection: ",{"fg":8}],["                   ",{}]]},"cursor":{"x":85}}],[0.104193,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000286,{"lines":{"0":[["      #getModelNameByCollectionName()                                                                   ",{}]],"2":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"4":[["      #populateResultWithDocuments()                                                                    ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"11":[["    mongraph                                                                                            ",{}]],"12":[["      #init()                                                                                           ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"14":[["    mongraphMongoosePlugin                                                                              ",{}]],"15":[["      #schema                                                                                           ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"18":[["    mongoose::Document                                                                                  ",{}]],"19":[["      #getNode()                                                                                        ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"23":[["      #createRelationshipTo()                                                                           ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"25":[["      #createRelationshipFrom()                                                                         ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"27":[["      #createRelationshipBetween()                                                                      ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"29":[["      #removeRelationshipsTo                                                                            ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"31":[["      #removeRelationshipsFrom                                                                          ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"33":[["      #removeRelationshipsBetween                                                                       ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"35":[["      #removeRelationships                                                                              ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"38":[["      #allRelationships()                                                                               ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"42":[["      #allRelationshipsBetween()                                                                        ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"46":[["      #outgoingRelationships()                                                                          ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"50":[["      #incomingRelationships()                                                                          ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"53":[["      #removeNode()                                                                                     ",{}]],"54":[["      ",{}],["  ◦ expect to remove a node including all incoming and outgoing relationships: ",{"fg":8}],["                   ",{}]]},"cursor":{"x":85}}],[0.157118,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.001973,{"lines":{"0":[["      #sortTypeOfRelationshipAndOptionsAndCallback()                                                    ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"2":[["      #populateResultWithDocuments()                                                                    ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"9":[["    mongraph                                                                                            ",{}]],"10":[["      #init()                                                                                           ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"12":[["    mongraphMongoosePlugin                                                                              ",{}]],"13":[["      #schema                                                                                           ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"16":[["    mongoose::Document                                                                                  ",{}]],"17":[["      #getNode()                                                                                        ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"21":[["      #createRelationshipTo()                                                                           ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"23":[["      #createRelationshipFrom()                                                                         ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"25":[["      #createRelationshipBetween()                                                                      ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"27":[["      #removeRelationshipsTo                                                                            ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"29":[["      #removeRelationshipsFrom                                                                          ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"31":[["      #removeRelationshipsBetween                                                                       ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"33":[["      #removeRelationships                                                                              ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"36":[["      #allRelationships()                                                                               ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"40":[["      #allRelationshipsBetween()                                                                        ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"44":[["      #outgoingRelationships()                                                                          ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"48":[["      #incomingRelationships()                                                                          ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"51":[["      #removeNode()                                                                                     ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"53":[["      #shortestPath()                                                                                   ",{}]],"54":[["      ",{}],["  ◦ expect to get the shortest path between two documents: ",{"fg":8}],["                                       ",{}]]},"cursor":{"x":65}}],[0.103682,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000153,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to sort arguments ",{"fg":8}],["                                                                     ",{}]],"1":[["      #populateResultWithDocuments()                                                                    ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"8":[["    mongraph                                                                                            ",{}]],"9":[["      #init()                                                                                           ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"11":[["    mongraphMongoosePlugin                                                                              ",{}]],"12":[["      #schema                                                                                           ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"15":[["    mongoose::Document                                                                                  ",{}]],"16":[["      #getNode()                                                                                        ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"20":[["      #createRelationshipTo()                                                                           ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"22":[["      #createRelationshipFrom()                                                                         ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"24":[["      #createRelationshipBetween()                                                                      ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"26":[["      #removeRelationshipsTo                                                                            ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"28":[["      #removeRelationshipsFrom                                                                          ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"30":[["      #removeRelationshipsBetween                                                                       ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"32":[["      #removeRelationships                                                                              ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"35":[["      #allRelationships()                                                                               ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"39":[["      #allRelationshipsBetween()                                                                        ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"43":[["      #outgoingRelationships()                                                                          ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"47":[["      #incomingRelationships()                                                                          ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"50":[["      #removeNode()                                                                                     ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"52":[["      #shortestPath()                                                                                   ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"54":[["      ",{}],["  ◦ expect to get a mongoose document instead of a native mongodb document: ",{"fg":8}],["                      ",{}]]},"cursor":{"x":82}}],[0.103221,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000158,{"lines":{"0":[["      #populateResultWithDocuments()                                                                    ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get an error and null with options as result if the data is not usable ",{"fg":8}],["             ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"7":[["    mongraph                                                                                            ",{}]],"8":[["      #init()                                                                                           ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"10":[["    mongraphMongoosePlugin                                                                              ",{}]],"11":[["      #schema                                                                                           ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"14":[["    mongoose::Document                                                                                  ",{}]],"15":[["      #getNode()                                                                                        ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"19":[["      #createRelationshipTo()                                                                           ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"21":[["      #createRelationshipFrom()                                                                         ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"23":[["      #createRelationshipBetween()                                                                      ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"25":[["      #removeRelationshipsTo                                                                            ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"27":[["      #removeRelationshipsFrom                                                                          ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"29":[["      #removeRelationshipsBetween                                                                       ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"31":[["      #removeRelationships                                                                              ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"34":[["      #allRelationships()                                                                               ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"38":[["      #allRelationshipsBetween()                                                                        ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"42":[["      #outgoingRelationships()                                                                          ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"46":[["      #incomingRelationships()                                                                          ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"49":[["      #removeNode()                                                                                     ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"51":[["      #shortestPath()                                                                                   ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"54":[["      ",{}],["  ◦ expect to get a mongoose document with conditions: ",{"fg":8}],["                                           ",{}]]},"cursor":{"x":61}}],[0.087503,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000221,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a node populated with the corresponding document ",{"fg":8}],["                               ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"5":[["    mongraph                                                                                            ",{}]],"6":[["      #init()                                                                                           ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"8":[["    mongraphMongoosePlugin                                                                              ",{}]],"9":[["      #schema                                                                                           ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"12":[["    mongoose::Document                                                                                  ",{}]],"13":[["      #getNode()                                                                                        ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"17":[["      #createRelationshipTo()                                                                           ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"19":[["      #createRelationshipFrom()                                                                         ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"21":[["      #createRelationshipBetween()                                                                      ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"23":[["      #removeRelationshipsTo                                                                            ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"25":[["      #removeRelationshipsFrom                                                                          ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"27":[["      #removeRelationshipsBetween                                                                       ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"29":[["      #removeRelationships                                                                              ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"32":[["      #allRelationships()                                                                               ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"36":[["      #allRelationshipsBetween()                                                                        ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"40":[["      #outgoingRelationships()                                                                          ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"44":[["      #incomingRelationships()                                                                          ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"47":[["      #removeNode()                                                                                     ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"49":[["      #shortestPath()                                                                                   ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"53":[["      #dataForNode()                                                                                    ",{}]],"54":[["      ",{}],["  ◦ expect to get null by default: ",{"fg":8}],["                                                               ",{}]]},"cursor":{"x":41}}],[0.113231,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000389,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get relationships populated with the corresponding documents ",{"fg":8}],["(47ms)",{"fg":3}],["                 ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"4":[["    mongraph                                                                                            ",{}]],"5":[["      #init()                                                                                           ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"7":[["    mongraphMongoosePlugin                                                                              ",{}]],"8":[["      #schema                                                                                           ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"11":[["    mongoose::Document                                                                                  ",{}]],"12":[["      #getNode()                                                                                        ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"16":[["      #createRelationshipTo()                                                                           ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"18":[["      #createRelationshipFrom()                                                                         ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"20":[["      #createRelationshipBetween()                                                                      ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"22":[["      #removeRelationshipsTo                                                                            ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"24":[["      #removeRelationshipsFrom                                                                          ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"26":[["      #removeRelationshipsBetween                                                                       ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"28":[["      #removeRelationships                                                                              ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"31":[["      #allRelationships()                                                                               ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"35":[["      #allRelationshipsBetween()                                                                        ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"39":[["      #outgoingRelationships()                                                                          ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"43":[["      #incomingRelationships()                                                                          ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"46":[["      #removeNode()                                                                                     ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"48":[["      #shortestPath()                                                                                   ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"52":[["      #dataForNode()                                                                                    ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"54":[["      ",{}],["  ◦ expect to get attributes for index: ",{"fg":8}],["                                                          ",{}]]},"cursor":{"x":46}}],[0.085559,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000144,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents ",{"fg":8}],["(72ms)",{"fg":3}],["                                ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"3":[["    mongraph                                                                                            ",{}]],"4":[["      #init()                                                                                           ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"6":[["    mongraphMongoosePlugin                                                                              ",{}]],"7":[["      #schema                                                                                           ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"10":[["    mongoose::Document                                                                                  ",{}]],"11":[["      #getNode()                                                                                        ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"15":[["      #createRelationshipTo()                                                                           ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"17":[["      #createRelationshipFrom()                                                                         ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"19":[["      #createRelationshipBetween()                                                                      ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"21":[["      #removeRelationshipsTo                                                                            ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"23":[["      #removeRelationshipsFrom                                                                          ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"25":[["      #removeRelationshipsBetween                                                                       ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"27":[["      #removeRelationships                                                                              ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"30":[["      #allRelationships()                                                                               ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"34":[["      #allRelationshipsBetween()                                                                        ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"38":[["      #outgoingRelationships()                                                                          ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"42":[["      #incomingRelationships()                                                                          ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"45":[["      #removeNode()                                                                                     ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"47":[["      #shortestPath()                                                                                   ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"51":[["      #dataForNode()                                                                                    ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"54":[["      ",{}],["  ◦ expect to delete values in document and on node: ",{"fg":8}],["                                             ",{}]]},"cursor":{"x":59}}],[0.133489,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.00086,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with query ",{"fg":8}],["(74ms)",{"fg":3}],["                     ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"2":[["    mongraph                                                                                            ",{}]],"3":[["      #init()                                                                                           ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"5":[["    mongraphMongoosePlugin                                                                              ",{}]],"6":[["      #schema                                                                                           ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"9":[["    mongoose::Document                                                                                  ",{}]],"10":[["      #getNode()                                                                                        ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"14":[["      #createRelationshipTo()                                                                           ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"16":[["      #createRelationshipFrom()                                                                         ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"18":[["      #createRelationshipBetween()                                                                      ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"20":[["      #removeRelationshipsTo                                                                            ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"22":[["      #removeRelationshipsFrom                                                                          ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"24":[["      #removeRelationshipsBetween                                                                       ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"26":[["      #removeRelationships                                                                              ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"29":[["      #allRelationships()                                                                               ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"33":[["      #allRelationshipsBetween()                                                                        ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"37":[["      #outgoingRelationships()                                                                          ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"41":[["      #incomingRelationships()                                                                          ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"44":[["      #removeNode()                                                                                     ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"46":[["      #shortestPath()                                                                                   ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"50":[["      #dataForNode()                                                                                    ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"54":[["      ",{}],["  ◦ expect to get node with indexed fields from mongoose schema: ",{"fg":8}],["                                 ",{}]]},"cursor":{"x":71}}],[0.14769,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to get path populated w/ corresponding documents with distinct collection ",{"fg":8}],["(64ms)",{"fg":3}],["       ",{}]],"1":[["    mongraph                                                                                            ",{}]],"2":[["      #init()                                                                                           ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"4":[["    mongraphMongoosePlugin                                                                              ",{}]],"5":[["      #schema                                                                                           ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"8":[["    mongoose::Document                                                                                  ",{}]],"9":[["      #getNode()                                                                                        ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"13":[["      #createRelationshipTo()                                                                           ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"15":[["      #createRelationshipFrom()                                                                         ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"17":[["      #createRelationshipBetween()                                                                      ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"19":[["      #removeRelationshipsTo                                                                            ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"21":[["      #removeRelationshipsFrom                                                                          ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"23":[["      #removeRelationshipsBetween                                                                       ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"25":[["      #removeRelationships                                                                              ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"28":[["      #allRelationships()                                                                               ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"32":[["      #allRelationshipsBetween()                                                                        ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"36":[["      #outgoingRelationships()                                                                          ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"40":[["      #incomingRelationships()                                                                          ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"43":[["      #removeNode()                                                                                     ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"45":[["      #shortestPath()                                                                                   ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"49":[["      #dataForNode()                                                                                    ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000336,{"lines":{"54":[["      ",{}],["  ◦ expect to store values from document in corresponding node if defined in mongoose schema: ",{"fg":8}],["    ",{}]]},"cursor":{"x":100}}],[0.116419,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000618,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect that we have the all needed records in mongodb ",{"fg":8}],["                                        ",{}]],"1":[["    mongraphMongoosePlugin                                                                              ",{}]],"2":[["      #schema                                                                                           ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"5":[["    mongoose::Document                                                                                  ",{}]],"6":[["      #getNode()                                                                                        ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"10":[["      #createRelationshipTo()                                                                           ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"12":[["      #createRelationshipFrom()                                                                         ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"14":[["      #createRelationshipBetween()                                                                      ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"16":[["      #removeRelationshipsTo                                                                            ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"18":[["      #removeRelationshipsFrom                                                                          ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"20":[["      #removeRelationshipsBetween                                                                       ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"22":[["      #removeRelationships                                                                              ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"25":[["      #allRelationships()                                                                               ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"29":[["      #allRelationshipsBetween()                                                                        ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"33":[["      #outgoingRelationships()                                                                          ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"37":[["      #incomingRelationships()                                                                          ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"40":[["      #removeNode()                                                                                     ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"42":[["      #shortestPath()                                                                                   ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"46":[["      #dataForNode()                                                                                    ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"52":[[")                                                                                                       ",{"fg":3}]],"53":[["      #init() with specific options                                                                     ",{}]],"54":[["      ",{}],["  ◦ expect to store relationships (redundant) in document: ",{"fg":8}],["                                       ",{}]]},"cursor":{"x":65}}],[0.138078,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000193,{"lines":{"0":[["      #schema                                                                                           ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to have extra attributes reserved for use with neo4j ",{"fg":8}],["(38ms)",{"fg":3}],["                            ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect that schema extensions and hooks can be optional ",{"fg":8}],["                                      ",{}]],"3":[["    mongoose::Document                                                                                  ",{}]],"4":[["      #getNode()                                                                                        ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"8":[["      #createRelationshipTo()                                                                           ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"10":[["      #createRelationshipFrom()                                                                         ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"12":[["      #createRelationshipBetween()                                                                      ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"14":[["      #removeRelationshipsTo                                                                            ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"16":[["      #removeRelationshipsFrom                                                                          ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"18":[["      #removeRelationshipsBetween                                                                       ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"20":[["      #removeRelationships                                                                              ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"23":[["      #allRelationships()                                                                               ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"27":[["      #allRelationshipsBetween()                                                                        ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"31":[["      #outgoingRelationships()                                                                          ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"35":[["      #incomingRelationships()                                                                          ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"38":[["      #removeNode()                                                                                     ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"40":[["      #shortestPath()                                                                                   ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"44":[["      #dataForNode()                                                                                    ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"50":[[")                                                                                                       ",{"fg":3}]],"51":[["      #init() with specific options                                                                     ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"53":[["      mongraph daily-use-test                                                                           ",{}]],"54":[["      ",{}],["  ◦ expect to count relationships correctly (incoming, outgoing and both): ",{"fg":8}],["                       ",{}]]},"cursor":{"x":81}}],[0.293211,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.0006669999999999999,{"lines":{"0":[["    mongoose::Document                                                                                  ",{}]],"1":[["      #getNode()                                                                                        ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"5":[["      #createRelationshipTo()                                                                           ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"7":[["      #createRelationshipFrom()                                                                         ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"9":[["      #createRelationshipBetween()                                                                      ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"11":[["      #removeRelationshipsTo                                                                            ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"13":[["      #removeRelationshipsFrom                                                                          ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"15":[["      #removeRelationshipsBetween                                                                       ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"17":[["      #removeRelationships                                                                              ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"20":[["      #allRelationships()                                                                               ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"24":[["      #allRelationshipsBetween()                                                                        ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"28":[["      #outgoingRelationships()                                                                          ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"32":[["      #incomingRelationships()                                                                          ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"35":[["      #removeNode()                                                                                     ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"37":[["      #shortestPath()                                                                                   ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"41":[["      #dataForNode()                                                                                    ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"47":[[")                                                                                                       ",{"fg":3}]],"48":[["      #init() with specific options                                                                     ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"50":[["      mongraph daily-use-test                                                                           ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"52":[["    Neo4j::Node                                                                                         ",{}]],"53":[["      #getCollectionName()                                                                              ",{}]],"54":[["      ",{}],["  ◦ expect to get the collection name from a node: ",{"fg":8}],["                                               ",{}]]},"cursor":{"x":57}}],[0.08749800000000001,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000303,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect not to get a corresponding node for an unstored document in graphdb ",{"fg":8}],["                   ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to find always the same corresponding node to a stored document ",{"fg":8}],["                       ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"3":[["      #createRelationshipTo()                                                                           ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"5":[["      #createRelationshipFrom()                                                                         ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"7":[["      #createRelationshipBetween()                                                                      ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"9":[["      #removeRelationshipsTo                                                                            ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"11":[["      #removeRelationshipsFrom                                                                          ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"13":[["      #removeRelationshipsBetween                                                                       ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"15":[["      #removeRelationships                                                                              ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"18":[["      #allRelationships()                                                                               ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"22":[["      #allRelationshipsBetween()                                                                        ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"26":[["      #outgoingRelationships()                                                                          ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"30":[["      #incomingRelationships()                                                                          ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"33":[["      #removeNode()                                                                                     ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"35":[["      #shortestPath()                                                                                   ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"39":[["      #dataForNode()                                                                                    ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"45":[[")                                                                                                       ",{"fg":3}]],"46":[["      #init() with specific options                                                                     ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"48":[["      mongraph daily-use-test                                                                           ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"50":[["    Neo4j::Node                                                                                         ",{}]],"51":[["      #getCollectionName()                                                                              ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"53":[["      #getMongoId()                                                                                     ",{}]],"54":[["      ",{}],["  ◦ expect to get the id of the corresponding document from a node: ",{"fg":8}],["                              ",{}]]},"cursor":{"x":74}}],[0.079529,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[0.000284,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to find a node by collection and _id through index on neo4j ",{"fg":8}],["                           ",{}]],"1":[["      #createRelationshipTo()                                                                           ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"3":[["      #createRelationshipFrom()                                                                         ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"5":[["      #createRelationshipBetween()                                                                      ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"7":[["      #removeRelationshipsTo                                                                            ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"9":[["      #removeRelationshipsFrom                                                                          ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"11":[["      #removeRelationshipsBetween                                                                       ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"13":[["      #removeRelationships                                                                              ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"16":[["      #allRelationships()                                                                               ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"20":[["      #allRelationshipsBetween()                                                                        ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"24":[["      #outgoingRelationships()                                                                          ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"28":[["      #incomingRelationships()                                                                          ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"31":[["      #removeNode()                                                                                     ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"33":[["      #shortestPath()                                                                                   ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"37":[["      #dataForNode()                                                                                    ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"43":[[")                                                                                                       ",{"fg":3}]],"44":[["      #init() with specific options                                                                     ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"46":[["      mongraph daily-use-test                                                                           ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"48":[["    Neo4j::Node                                                                                         ",{}]],"49":[["      #getCollectionName()                                                                              ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"51":[["      #getMongoId()                                                                                     ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"53":[["      #getDocument()                                                                                    ",{}]],"54":[["      ",{}],["  ◦ expect to get equivalent document from a node: ",{"fg":8}],["                                               ",{}]]},"cursor":{"x":57}}],[0.084023,{"lines":{"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[6.7e-05,{"lines":{"0":[["      #createRelationshipTo()                                                                           ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"2":[["      #createRelationshipFrom()                                                                         ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"4":[["      #createRelationshipBetween()                                                                      ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"6":[["      #removeRelationshipsTo                                                                            ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"8":[["      #removeRelationshipsFrom                                                                          ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"10":[["      #removeRelationshipsBetween                                                                       ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"12":[["      #removeRelationships                                                                              ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"15":[["      #allRelationships()                                                                               ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"19":[["      #allRelationshipsBetween()                                                                        ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"23":[["      #outgoingRelationships()                                                                          ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"27":[["      #incomingRelationships()                                                                          ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"30":[["      #removeNode()                                                                                     ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"32":[["      #shortestPath()                                                                                   ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"36":[["      #dataForNode()                                                                                    ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"42":[[")                                                                                                       ",{"fg":3}]],"43":[["      #init() with specific options                                                                     ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"45":[["      mongraph daily-use-test                                                                           ",{}]],"46":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"47":[["    Neo4j::Node                                                                                         ",{}]],"48":[["      #getCollectionName()                                                                              ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"50":[["      #getMongoId()                                                                                     ",{}]],"51":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"52":[["      #getDocument()                                                                                    ",{}]],"53":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]]}}],[0.128006,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an outgoing relationship from this document to another document ",{"fg":8}],["             ",{}]],"1":[["      #createRelationshipFrom()                                                                         ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expect to create an incoming relationship from another document to this document ",{"fg":8}],["             ",{}]],"3":[["      #createRelationshipBetween()                                                                      ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"5":[["      #removeRelationshipsTo                                                                            ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"7":[["      #removeRelationshipsFrom                                                                          ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"9":[["      #removeRelationshipsBetween                                                                       ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"11":[["      #removeRelationships                                                                              ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"14":[["      #allRelationships()                                                                               ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"18":[["      #allRelationshipsBetween()                                                                        ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"22":[["      #outgoingRelationships()                                                                          ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"26":[["      #incomingRelationships()                                                                          ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"29":[["      #removeNode()                                                                                     ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"31":[["      #shortestPath()                                                                                   ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"35":[["      #dataForNode()                                                                                    ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"41":[[")                                                                                                       ",{"fg":3}]],"42":[["      #init() with specific options                                                                     ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"44":[["      mongraph daily-use-test                                                                           ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"46":[["    Neo4j::Node                                                                                         ",{}]],"47":[["      #getCollectionName()                                                                              ",{}]],"48":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"49":[["      #getMongoId()                                                                                     ",{}]],"50":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"51":[["      #getDocument()                                                                                    ",{}]],"52":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"53":[["                                                                                                        ",{}]]}}],[0.000763,{"lines":{"0":[["      #createRelationshipBetween()                                                                      ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expect to create a relationship between two documents (bidirectional) ",{"fg":8}],["                        ",{}]],"2":[["      #removeRelationshipsTo                                                                            ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove outgoing relationships to a document ",{"fg":8}],["(57ms)",{"fg":3}],["                                  ",{}]],"4":[["      #removeRelationshipsFrom                                                                          ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"6":[["      #removeRelationshipsBetween                                                                       ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"8":[["      #removeRelationships                                                                              ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"11":[["      #allRelationships()                                                                               ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"15":[["      #allRelationshipsBetween()                                                                        ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"19":[["      #outgoingRelationships()                                                                          ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"23":[["      #incomingRelationships()                                                                          ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"26":[["      #removeNode()                                                                                     ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"28":[["      #shortestPath()                                                                                   ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"32":[["      #dataForNode()                                                                                    ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"38":[[")                                                                                                       ",{"fg":3}]],"39":[["      #init() with specific options                                                                     ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"41":[["      mongraph daily-use-test                                                                           ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"43":[["    Neo4j::Node                                                                                         ",{}]],"44":[["      #getCollectionName()                                                                              ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"46":[["      #getMongoId()                                                                                     ",{}]],"47":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"48":[["      #getDocument()                                                                                    ",{}]],"49":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"50":[["                                                                                                        ",{}]],"51":[["                                                                                                        ",{}]],"52":[[" ",{"fg":10}],[" 50 tests complete",{"fg":2}],[" (6 seconds)",{"fg":8}],["                                                                         ",{}]]}}],[0.295821,{"lines":{"0":[["      #removeRelationshipsFrom                                                                          ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"2":[["      #removeRelationshipsBetween                                                                       ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"4":[["      #removeRelationships                                                                              ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"7":[["      #allRelationships()                                                                               ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"11":[["      #allRelationshipsBetween()                                                                        ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"15":[["      #outgoingRelationships()                                                                          ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"19":[["      #incomingRelationships()                                                                          ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"22":[["      #removeNode()                                                                                     ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"24":[["      #shortestPath()                                                                                   ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"28":[["      #dataForNode()                                                                                    ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"34":[[")                                                                                                       ",{"fg":3}]],"35":[["      #init() with specific options                                                                     ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"37":[["      mongraph daily-use-test                                                                           ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"39":[["    Neo4j::Node                                                                                         ",{}]],"40":[["      #getCollectionName()                                                                              ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"42":[["      #getMongoId()                                                                                     ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"44":[["      #getDocument()                                                                                    ",{}]],"45":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"46":[["                                                                                                        ",{}]],"47":[["                                                                                                        ",{}]],"48":[[" ",{"fg":10}],[" 50 tests complete",{"fg":2}],[" (6 seconds)",{"fg":8}],["                                                                         ",{}]],"49":[["                                                                                                        ",{}]],"51":[["> mongraph@0.1.16 clean /Users/philipp/code/mongraph                                                    ",{}]],"52":[["> find src test -name '*.js' -delete -o -name '*.map' -delete                                           ",{}]]}}],[0.026765,{"lines":{"54":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[1.643352,{"lines":{"54":[["bash-3.2$ #                                                                                             ",{}]]},"cursor":{"x":11}}],[0.08784599999999999,{"cursor":{"x":12}}],[0.152147,{"lines":{"54":[["bash-3.2$ # d                                                                                           ",{}]]},"cursor":{"x":13}}],[0.09591,{"lines":{"54":[["bash-3.2$ # do                                                                                          ",{}]]},"cursor":{"x":14}}],[0.160164,{"lines":{"54":[["bash-3.2$ # don                                                                                         ",{}]]},"cursor":{"x":15}}],[0.09575400000000001,{"lines":{"54":[["bash-3.2$ # done                                                                                        ",{}]]},"cursor":{"x":16}}],[0.112104,{"cursor":{"x":17}}],[0.184129,{"lines":{"54":[["bash-3.2$ # done :                                                                                      ",{}]]},"cursor":{"x":18}}],[0.40033,{"lines":{"54":[["bash-3.2$ # done :)                                                                                     ",{}]]},"cursor":{"x":19}}],[0.160222,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming relationships from a document ",{"fg":8}],["(51ms)",{"fg":3}],["                               ",{}]],"1":[["      #removeRelationshipsBetween                                                                       ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"3":[["      #removeRelationships                                                                              ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"6":[["      #allRelationships()                                                                               ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"10":[["      #allRelationshipsBetween()                                                                        ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"14":[["      #outgoingRelationships()                                                                          ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"18":[["      #incomingRelationships()                                                                          ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"21":[["      #removeNode()                                                                                     ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"23":[["      #shortestPath()                                                                                   ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"27":[["      #dataForNode()                                                                                    ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"32":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"33":[[")                                                                                                       ",{"fg":3}]],"34":[["      #init() with specific options                                                                     ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"36":[["      mongraph daily-use-test                                                                           ",{}]],"37":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"38":[["    Neo4j::Node                                                                                         ",{}]],"39":[["      #getCollectionName()                                                                              ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"41":[["      #getMongoId()                                                                                     ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"43":[["      #getDocument()                                                                                    ",{}]],"44":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"45":[["                                                                                                        ",{}]],"47":[[" ",{"fg":10}],[" 50 tests complete",{"fg":2}],[" (6 seconds)",{"fg":8}],["                                                                         ",{}]],"48":[["                                                                                                        ",{}]],"50":[["> mongraph@0.1.16 clean /Users/philipp/code/mongraph                                                    ",{}]],"51":[["> find src test -name '*.js' -delete -o -name '*.map' -delete                                           ",{}]],"52":[["                                                                                                        ",{}]],"53":[["bash-3.2$ # done :)                                                                                     ",{}]],"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[8.8e-05,{"lines":{"54":[["bash-3.2$                                                                                               ",{}]]},"cursor":{"x":10}}],[1.856552,{"lines":{"54":[["bash-3.2$ e                                                                                             ",{}]]},"cursor":{"x":11}}],[0.184061,{"lines":{"54":[["bash-3.2$ ex                                                                                            ",{}]]},"cursor":{"x":12}}],[0.104104,{"lines":{"54":[["bash-3.2$ exi                                                                                           ",{}]]},"cursor":{"x":13}}],[0.136015,{"lines":{"54":[["bash-3.2$ exit                                                                                          ",{}]]},"cursor":{"x":14}}],[0.072018,{"lines":{"0":[["      #removeRelationshipsBetween                                                                       ",{}]],"1":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"2":[["      #removeRelationships                                                                              ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"4":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"5":[["      #allRelationships()                                                                               ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"8":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"9":[["      #allRelationshipsBetween()                                                                        ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"12":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"13":[["      #outgoingRelationships()                                                                          ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"16":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"17":[["      #incomingRelationships()                                                                          ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"19":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"20":[["      #removeNode()                                                                                     ",{}]],"21":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"22":[["      #shortestPath()                                                                                   ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"25":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"26":[["      #dataForNode()                                                                                    ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"31":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"32":[[")                                                                                                       ",{"fg":3}]],"33":[["      #init() with specific options                                                                     ",{}]],"34":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"35":[["      mongraph daily-use-test                                                                           ",{}]],"36":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"37":[["    Neo4j::Node                                                                                         ",{}]],"38":[["      #getCollectionName()                                                                              ",{}]],"39":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"40":[["      #getMongoId()                                                                                     ",{}]],"41":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"42":[["      #getDocument()                                                                                    ",{}]],"43":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"44":[["                                                                                                        ",{}]],"46":[[" ",{"fg":10}],[" 50 tests complete",{"fg":2}],[" (6 seconds)",{"fg":8}],["                                                                         ",{}]],"47":[["                                                                                                        ",{}]],"49":[["> mongraph@0.1.16 clean /Users/philipp/code/mongraph                                                    ",{}]],"50":[["> find src test -name '*.js' -delete -o -name '*.map' -delete                                           ",{}]],"51":[["                                                                                                        ",{}]],"52":[["bash-3.2$ # done :)                                                                                     ",{}]],"53":[["bash-3.2$ exit                                                                                          ",{}]],"54":[["                                                                                                        ",{}]]},"cursor":{"x":0}}],[6.9e-05,{"lines":{"0":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove incoming and outgoing relationships between two documents ",{"fg":8}],["(95ms)",{"fg":1}],["            ",{}]],"1":[["      #removeRelationships                                                                              ",{}]],"2":[["      ",{}],["  ✓",{"fg":2}],[" expects to remove all incoming and outgoing relationships ",{"fg":8}],["(49ms)",{"fg":3}],["                              ",{}]],"3":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove all relationship of a specific type ",{"fg":8}],["                                         ",{}]],"4":[["      #allRelationships()                                                                               ",{}]],"5":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming and outgoing relationships as relationship object ",{"fg":8}],["                     ",{}]],"6":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all related documents attached to relationships ",{"fg":8}],["                                ",{}]],"7":[["      ",{}],["  ✓",{"fg":2}],[" expect to count all matched relationships, nodes or both ",{"fg":8}],["(99ms)",{"fg":1}],["                               ",{}]],"8":[["      #allRelationshipsBetween()                                                                        ",{}]],"9":[["      ",{}],["  ✓",{"fg":2}],[" expect to get all relationships between two documents ",{"fg":8}],["                                        ",{}]],"10":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"11":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships between two documents ",{"fg":8}],["(61ms)",{"fg":3}],["                             ",{}]],"12":[["      #outgoingRelationships()                                                                          ",{}]],"13":[["      ",{}],["  ✓",{"fg":2}],[" expect to get outgoing relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"14":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents with a condition ",{"fg":8}],["                              ",{}]],"15":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only outgoing relationships ",{"fg":8}],["                                                    ",{}]],"16":[["      #incomingRelationships()                                                                          ",{}]],"17":[["      ",{}],["  ✓",{"fg":2}],[" expect to get only incoming relationships ",{"fg":8}],["                                                    ",{}]],"18":[["      ",{}],["  ✓",{"fg":2}],[" expect to get incoming relationships+documents from a specific collection ",{"fg":8}],["                    ",{}]],"19":[["      #removeNode()                                                                                     ",{}]],"20":[["      ",{}],["  ✓",{"fg":2}],[" expect to remove a node including all incoming and outgoing relationships ",{"fg":8}],["(88ms)",{"fg":1}],["              ",{}]],"21":[["      #shortestPath()                                                                                   ",{}]],"22":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the shortest path between two documents ",{"fg":8}],["                                        ",{}]],"23":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document instead of a native mongodb document ",{"fg":8}],["                       ",{}]],"24":[["      ",{}],["  ✓",{"fg":2}],[" expect to get a mongoose document with conditions ",{"fg":8}],["                                            ",{}]],"25":[["      #dataForNode()                                                                                    ",{}]],"26":[["      ",{}],["  ✓",{"fg":2}],[" expect to get null by default ",{"fg":8}],["                                                                ",{}]],"27":[["      ",{}],["  ✓",{"fg":2}],[" expect to get attributes for index ",{"fg":8}],["                                                           ",{}]],"28":[["      ",{}],["  ✓",{"fg":2}],[" expect to delete values in document and on node ",{"fg":8}],["(49ms)",{"fg":3}],["                                        ",{}]],"29":[["      ",{}],["  ✓",{"fg":2}],[" expect to get node with indexed fields from mongoose schema ",{"fg":8}],["(73ms)",{"fg":3}],["                            ",{}]],"30":[["      ",{}],["  ✓",{"fg":2}],[" expect to store values from document in corresponding node if defined in mongoose schema ",{"fg":8}],["(43ms",{"fg":3}]],"31":[[")                                                                                                       ",{"fg":3}]],"32":[["      #init() with specific options                                                                     ",{}]],"33":[["      ",{}],["  ✓",{"fg":2}],[" expect to store relationships (redundant) in document ",{"fg":8}],["(61ms)",{"fg":3}],["                                  ",{}]],"34":[["      mongraph daily-use-test                                                                           ",{}]],"35":[["      ",{}],["  ✓",{"fg":2}],[" expect to count relationships correctly (incoming, outgoing and both) ",{"fg":8}],["(221ms)",{"fg":1}],["                 ",{}]],"36":[["    Neo4j::Node                                                                                         ",{}]],"37":[["      #getCollectionName()                                                                              ",{}]],"38":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the collection name from a node ",{"fg":8}],["                                                ",{}]],"39":[["      #getMongoId()                                                                                     ",{}]],"40":[["      ",{}],["  ✓",{"fg":2}],[" expect to get the id of the corresponding document from a node ",{"fg":8}],["                               ",{}]],"41":[["      #getDocument()                                                                                    ",{}]],"42":[["      ",{}],["  ✓",{"fg":2}],[" expect to get equivalent document from a node ",{"fg":8}],["                                                ",{}]],"43":[["                                                                                                        ",{}]],"45":[[" ",{"fg":10}],[" 50 tests complete",{"fg":2}],[" (6 seconds)",{"fg":8}],["                                                                         ",{}]],"46":[["                                                                                                        ",{}]],"48":[["> mongraph@0.1.16 clean /Users/philipp/code/mongraph                                                    ",{}]],"49":[["> find src test -name '*.js' -delete -o -name '*.map' -delete                                           ",{}]],"50":[["                                                                                                        ",{}]],"51":[["bash-3.2$ # done :)                                                                                     ",{}]],"52":[["bash-3.2$ exit                                                                                          ",{}]],"53":[["exit                                                                                                    ",{}]]}}]]